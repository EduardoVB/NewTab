VERSION 5.00
Begin VB.PropertyPage pagNewTabTabs 
   Caption         =   "Tabs"
   ClientHeight    =   8508
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   6804
   BeginProperty Font 
      Name            =   "Tahoma"
      Size            =   8.4
      Charset         =   0
      Weight          =   400
      Underline       =   0   'False
      Italic          =   0   'False
      Strikethrough   =   0   'False
   EndProperty
   LockControls    =   -1  'True
   PaletteMode     =   0  'Halftone
   ScaleHeight     =   8508
   ScaleWidth      =   6804
   Begin VB.Timer tmrTabChanged 
      Enabled         =   0   'False
      Interval        =   300
      Left            =   120
      Top             =   7620
   End
   Begin VB.PictureBox picTabKeyHolder 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   310
      Left            =   2000
      ScaleHeight     =   312
      ScaleWidth      =   996
      TabIndex        =   43
      Top             =   1945
      Width           =   1000
   End
   Begin VB.CommandButton cmdRemoveCustomColor 
      Caption         =   "รป"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "Wingdings"
         Size            =   12
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   2070
      TabIndex        =   39
      Tag             =   "E"
      ToolTipText     =   "Remove custom color"
      Top             =   6520
      Width           =   300
   End
   Begin VB.TextBox txtCustomColor 
      Height          =   310
      Left            =   5448
      TabIndex        =   38
      Top             =   5920
      Width           =   1000
   End
   Begin VB.PictureBox picGeneralColor 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   612
      Left            =   3696
      ScaleHeight     =   588
      ScaleWidth      =   588
      TabIndex        =   36
      Top             =   6400
      Width           =   612
   End
   Begin VB.CommandButton cmdChangeCustomColor 
      Caption         =   "Change"
      Height          =   300
      Left            =   960
      TabIndex        =   35
      Top             =   6520
      Width           =   1050
   End
   Begin VB.PictureBox picCustomColor 
      Appearance      =   0  'Flat
      AutoRedraw      =   -1  'True
      BackColor       =   &H80000005&
      FillStyle       =   0  'Solid
      ForeColor       =   &H80000008&
      Height          =   612
      Left            =   240
      ScaleHeight     =   588
      ScaleWidth      =   588
      TabIndex        =   33
      Top             =   6400
      Width           =   612
   End
   Begin VB.ComboBox cboColorID 
      Height          =   300
      Left            =   840
      Style           =   2  'Dropdown List
      TabIndex        =   32
      Top             =   5920
      Width           =   3500
   End
   Begin VB.TextBox txtTabFixedWidth 
      Height          =   310
      Left            =   2000
      TabIndex        =   25
      Top             =   2305
      Width           =   1000
   End
   Begin VB.TextBox txtTabData 
      Height          =   310
      Left            =   2000
      TabIndex        =   23
      Top             =   1585
      Width           =   1000
   End
   Begin VB.PictureBox picTabTagHolder 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   310
      Left            =   2000
      ScaleHeight     =   312
      ScaleWidth      =   3216
      TabIndex        =   21
      Top             =   1225
      Width           =   3217
   End
   Begin VB.PictureBox picTabToolTipTextHolder 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   310
      Left            =   2000
      ScaleHeight     =   312
      ScaleWidth      =   3216
      TabIndex        =   13
      Top             =   865
      Width           =   3217
   End
   Begin VB.PictureBox picTabCaptionHolder 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   310
      Left            =   2000
      ScaleHeight     =   312
      ScaleWidth      =   3216
      TabIndex        =   10
      Top             =   505
      Width           =   3217
   End
   Begin VB.PictureBox picTDICover1 
      BorderStyle     =   0  'None
      Height          =   2390
      Index           =   2
      Left            =   15400
      ScaleHeight     =   2388
      ScaleWidth      =   1332
      TabIndex        =   19
      Top             =   480
      Visible         =   0   'False
      Width           =   1330
   End
   Begin VB.PictureBox picTDICover1 
      BorderStyle     =   0  'None
      Height          =   490
      Index           =   1
      Left            =   12520
      ScaleHeight     =   492
      ScaleWidth      =   4092
      TabIndex        =   18
      Top             =   0
      Visible         =   0   'False
      Width           =   4090
   End
   Begin VB.Timer tmrShowTabData 
      Enabled         =   0   'False
      Interval        =   1
      Left            =   120
      Top             =   480
   End
   Begin VB.CheckBox chkTabVisible 
      Caption         =   "TabVisible"
      Height          =   204
      Left            =   2000
      TabIndex        =   14
      Top             =   3036
      Width           =   1330
   End
   Begin VB.CheckBox chkTabEnabled 
      Caption         =   "TabEnabled"
      Height          =   204
      Left            =   2000
      TabIndex        =   11
      Top             =   2740
      Width           =   1330
   End
   Begin VB.CommandButton cmdMoveNext 
      Caption         =   "4"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "Marlett"
         Size            =   11.4
         Charset         =   2
         Weight          =   500
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   5922
      TabIndex        =   8
      Tag             =   "E"
      ToolTipText     =   "Go to next tab"
      Top             =   70
      Width           =   300
   End
   Begin VB.CommandButton cmdMovePrevious 
      Caption         =   "3"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "Marlett"
         Size            =   11.4
         Charset         =   2
         Weight          =   500
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   5610
      TabIndex        =   7
      Tag             =   "E"
      ToolTipText     =   "Go to previous tab"
      Top             =   70
      Width           =   300
   End
   Begin VB.CommandButton cmdMoveControlToTab 
      Caption         =   "Move a control to this tab"
      Height          =   315
      Left            =   3800
      TabIndex        =   17
      ToolTipText     =   "Add Tab at this position"
      Top             =   4076
      Width           =   2700
   End
   Begin VB.CommandButton cmdMoveContainedControls 
      Caption         =   "Move the controls to another tab"
      Enabled         =   0   'False
      Height          =   315
      Left            =   1020
      TabIndex        =   16
      ToolTipText     =   "Add Tab at this position"
      Top             =   4076
      Width           =   2700
   End
   Begin VB.Timer tmrClick 
      Enabled         =   0   'False
      Interval        =   800
      Left            =   5535
      Top             =   815
   End
   Begin VB.Timer tmrAutoClick 
      Enabled         =   0   'False
      Interval        =   200
      Left            =   5535
      Top             =   445
   End
   Begin VB.CommandButton cmdTabPrev 
      Caption         =   "3"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "Marlett"
         Size            =   11.4
         Charset         =   2
         Weight          =   500
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   1815
      TabIndex        =   2
      Tag             =   "E"
      ToolTipText     =   "Go to previous tab"
      Top             =   70
      Width           =   300
   End
   Begin VB.CommandButton cmdTabNext 
      Caption         =   "4"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "Marlett"
         Size            =   11.4
         Charset         =   2
         Weight          =   500
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   2130
      TabIndex        =   3
      Tag             =   "E"
      ToolTipText     =   "Go to next tab"
      Top             =   70
      Width           =   300
   End
   Begin VB.CommandButton cmdInsertTab 
      Caption         =   "Insert tab"
      Height          =   300
      Left            =   2640
      TabIndex        =   4
      ToolTipText     =   "Add Tab at this position"
      Top             =   70
      Width           =   1050
   End
   Begin VB.CommandButton cmdRemoveTab 
      Caption         =   "รป"
      BeginProperty Font 
         Name            =   "Wingdings"
         Size            =   12
         Charset         =   2
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   300
      Left            =   3750
      TabIndex        =   5
      Tag             =   "E"
      ToolTipText     =   "Remove tab"
      Top             =   70
      Width           =   300
   End
   Begin VB.TextBox txtTab 
      BackColor       =   &H8000000F&
      Height          =   300
      Left            =   1140
      Locked          =   -1  'True
      MaxLength       =   3
      TabIndex        =   1
      TabStop         =   0   'False
      Top             =   70
      Width           =   588
   End
   Begin NewTabCtl.NewTab NewTab1 
      Height          =   804
      Left            =   192
      TabIndex        =   44
      Top             =   7560
      Width           =   6540
      _ExtentX        =   11536
      _ExtentY        =   1397
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Tahoma"
         Size            =   8.4
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      TabHeight       =   579
      AutoTabHeight   =   -1  'True
      ControlVersion  =   11
      TabCaption(0)   =   ""
      TabCaption(1)   =   ""
      TabCaption(2)   =   ""
   End
   Begin VB.Line Line3 
      BorderColor     =   &H80000006&
      BorderStyle     =   3  'Dot
      X1              =   6720
      X2              =   0
      Y1              =   7300
      Y2              =   7300
   End
   Begin VB.Line Line2 
      BorderColor     =   &H8000000A&
      BorderStyle     =   3  'Dot
      X1              =   6720
      X2              =   0
      Y1              =   4700
      Y2              =   4700
   End
   Begin VB.Line Line1 
      BorderColor     =   &H8000000A&
      BorderStyle     =   3  'Dot
      X1              =   6720
      X2              =   0
      Y1              =   3450
      Y2              =   3450
   End
   Begin VB.Label Label18 
      Alignment       =   1  'Right Justify
      Caption         =   "Color:"
      Height          =   264
      Left            =   4680
      TabIndex        =   42
      Top             =   5950
      Width           =   660
   End
   Begin VB.Label Label17 
      Caption         =   "(Can be used to set the active tab in the 'Tab' property. Or to store a custom String data)"
      Height          =   492
      Left            =   3120
      TabIndex        =   41
      Top             =   1884
      Width           =   3720
   End
   Begin VB.Label Label16 
      Alignment       =   1  'Right Justify
      Caption         =   "TabKey:"
      Height          =   228
      Left            =   440
      TabIndex        =   40
      Top             =   1981
      Width           =   1488
   End
   Begin VB.Label Label15 
      Caption         =   "Tip: to remove a custom color in code, set it to the exact general color or to -1."
      Height          =   612
      Left            =   4440
      TabIndex        =   37
      Top             =   6400
      Width           =   2172
   End
   Begin VB.Label Label14 
      Alignment       =   1  'Right Justify
      Caption         =   "The general color is:"
      Height          =   576
      Left            =   2712
      TabIndex        =   34
      Top             =   6496
      Width           =   900
   End
   Begin VB.Label Label12 
      Caption         =   "ColorID:"
      Height          =   260
      Left            =   144
      TabIndex        =   31
      Top             =   5950
      Width           =   660
   End
   Begin VB.Label Label6 
      Caption         =   "(A custom data type Long for the tab)"
      Height          =   372
      Left            =   3120
      TabIndex        =   30
      Top             =   1630
      Width           =   3000
   End
   Begin VB.Label Label5 
      Caption         =   "(A custom String stored for the tab)"
      Height          =   450
      Left            =   5400
      TabIndex        =   29
      Top             =   1170
      Width           =   1370
   End
   Begin VB.Label Label4 
      Caption         =   $"pagNewTabTabs.pgx":0000
      ForeColor       =   &H00C00000&
      Height          =   900
      Left            =   2240
      TabIndex        =   28
      Top             =   4960
      Width           =   4400
   End
   Begin VB.Label Label11 
      Caption         =   "Utility to move controls from one tab to another:"
      BeginProperty Font 
         Name            =   "Tahoma"
         Size            =   7.8
         Charset         =   0
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   252
      Left            =   144
      TabIndex        =   27
      Top             =   3724
      Width           =   6492
   End
   Begin VB.Label Label10 
      Alignment       =   1  'Right Justify
      Caption         =   "TabFixedWidth:"
      Height          =   228
      Left            =   440
      TabIndex        =   26
      Top             =   2341
      Width           =   1488
   End
   Begin VB.Label Label9 
      Alignment       =   1  'Right Justify
      Caption         =   "TabData:"
      Height          =   228
      Left            =   440
      TabIndex        =   24
      Top             =   1621
      Width           =   1488
   End
   Begin VB.Label Label8 
      Alignment       =   1  'Right Justify
      Caption         =   "TabTag:"
      Height          =   228
      Left            =   440
      TabIndex        =   22
      Top             =   1261
      Width           =   1488
   End
   Begin VB.Label Label7 
      Caption         =   "TabCustomColor property:"
      Height          =   204
      Left            =   144
      TabIndex        =   20
      Top             =   4960
      Width           =   1992
   End
   Begin VB.Label lblContainedControls 
      Alignment       =   2  'Center
      Caption         =   "Controls in tab: ##"
      ForeColor       =   &H00C00000&
      Height          =   490
      Left            =   144
      TabIndex        =   15
      Top             =   4036
      Width           =   800
   End
   Begin VB.Label Label3 
      Alignment       =   1  'Right Justify
      Caption         =   "TabToolTipText:"
      Height          =   225
      Left            =   440
      TabIndex        =   12
      Top             =   905
      Width           =   1485
   End
   Begin VB.Label Label13 
      Alignment       =   1  'Right Justify
      Caption         =   "TabCaption:"
      Height          =   225
      Left            =   440
      TabIndex        =   9
      Top             =   545
      Width           =   1485
   End
   Begin VB.Label Label2 
      Alignment       =   1  'Right Justify
      Caption         =   "Change tab order:"
      Height          =   270
      Left            =   4140
      TabIndex        =   6
      Top             =   105
      Width           =   1400
   End
   Begin VB.Label Label1 
      Alignment       =   1  'Right Justify
      Caption         =   "Current tab:"
      Height          =   225
      Left            =   60
      TabIndex        =   0
      Top             =   105
      Width           =   975
   End
End
Attribute VB_Name = "pagNewTabTabs"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
Private Declare Function SendMessage Lib "user32" Alias "SendMessageW" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

Private Enum NTMouseButtonsConstants
    ntMBLeft = 1
    ntMBRight = 2
End Enum

Private Type POINTAPI
    X As Long
    Y As Long
End Type

Private Declare Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
Private Declare Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As Long

Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
Private Declare Function GetAsyncKeyState Lib "user32" (ByVal vKey As Long) As Integer
Private Const VK_LBUTTON = &H1
Private Const VK_RBUTTON = &H2
Private Const SM_SWAPBUTTON = 23&

Private Const cCopyImageTTT As String = "Double click on the image to copy it to the clipboard"

Private mLoading As Boolean

Private Type T_TabDataP
    Caption As String
    Enabled As Boolean
    Visible As Boolean
    ToolTipText As String
    Controls As Collection
    Picture As StdPicture
    Pic16 As StdPicture
    Pic20 As StdPicture
    Pic24 As StdPicture
    IconFont As StdFont
    IconChar As Long
    IconLeftOffset As Long
    IconTopOffset As Long
    Tag As String
    Data As Long
    FixedWidth As Long
    CustomColor(16) As Long
    Key As String
End Type

Private mTabData() As T_TabDataP
Private mTab As Long
Private mTabs As Long
Private mStrImagesDifferences As String

Private mShowingTabData As Boolean
Private mDefaultIconFont As StdFont
Private mLastIconFont As StdFont
Private mXMouseDown As Long
Private mYMouseDown As Long
Private mEnableHorizontalDragging As Boolean
Private mEnableVerticalDragging As Boolean
Private mTDIMode As Boolean
Private mPPHwnd As Long

Private WithEvents mUniTextTabCaption As cUniTextBox
Attribute mUniTextTabCaption.VB_VarHelpID = -1
Private mUniTextTabCaptionSync As Boolean
Private WithEvents mUniTextTabToolTipText As cUniTextBox
Attribute mUniTextTabToolTipText.VB_VarHelpID = -1
Private mUniTextTabToolTipTextSync As Boolean
Private WithEvents mUniTextTabTag As cUniTextBox
Attribute mUniTextTabTag.VB_VarHelpID = -1
Private mUniTextTabTagSync As Boolean
Private WithEvents mUniTextTabKey As cUniTextBox
Attribute mUniTextTabKey.VB_VarHelpID = -1
Private mUniTextTabKeySync As Boolean

Private mSC As NewTab

Private Sub cboColorID_Click()
    ShowCustomColor
End Sub

Private Sub chkTabEnabled_Click()
    If Not mLoading And Not mShowingTabData Then
        Changed = True
        mTabData(mTab).Enabled = (chkTabEnabled.Value = 1)
        ShowTabData
    End If
End Sub

Private Sub chkTabVisible_Click()
    If Not mLoading And Not mShowingTabData Then
        Changed = True
        mTabData(mTab).Visible = (chkTabVisible.Value = 1)
    End If
End Sub

Private Sub cmdChangeCustomColor_Click()
    Dim iDlg As New cCommonDialog
    
    iDlg.ShowColor
    If Not iDlg.Canceled Then
        mTabData(mTab).CustomColor(cboColorID.ItemData(cboColorID.ListIndex)) = iDlg.Color
        Changed = True
        ShowCustomColor
    End If
End Sub

Private Sub cmdInsertTab_Click()
    Dim iTabData() As T_TabDataP
    Dim t As Long
    Dim c As Long
    
    ReDim iTabData(mTabs)
    For t = 0 To mTab
        iTabData(t) = mTabData(t)
    Next t
    For t = mTab + 1 To mTabs - 1
        iTabData(t + 1) = mTabData(t)
        If iTabData(t + 1).Caption = "Tab " & CStr(t) Then
            iTabData(t + 1).Caption = "Tab " & CStr(t + 1)
        End If
    Next t
    mTabs = mTabs + 1
    
    ReDim mTabData(mTabs - 1)
    For t = 0 To mTabs - 1
        mTabData(t) = iTabData(t)
    Next t
    
    mTab = mTab + 1
    mTabData(mTab).Caption = "Tab " & CStr(mTab)
    Set mTabData(mTab).Controls = New Collection
    Set mTabData(mTab).IconFont = CloneFont(mLastIconFont)
    mTabData(mTab).Enabled = True
    mTabData(mTab).Visible = True
    For c = 0 To 16
        mTabData(mTab).CustomColor(c) = GetGeneralColor(c)
    Next
    Changed = True
    
    NewTab1.Tabs = mTabs
    ShowTabData

End Sub


Private Sub cmdMoveContainedControls_Click()
    Dim iStr As String
    Dim t As Long
    Dim iCtlName As Variant
    Dim iExchange As Boolean
    Dim iObj As Object
    
    iStr = InputBox("Enter the tab number where the controls will be moved.", "Enter tab number")
    If iStr <> "" Then
        If IsNumeric(iStr) Then
            t = Val(iStr)
            If (t > -1) And (t <= (mTabs - 1)) Then
                If t = mTab Then
                    MsgBox "Destination tab number must be different than current tab.", vbExclamation
                Else
                    If mTabData(t).Controls.Count > 0 Then
                        Select Case MsgBox("Destination tab already has controls, do you want to exchange the controls with this tab? (Click 'No' to move all the controls to the destination tab without moving the ones that it already has to this tab).", vbYesNoCancel)
                            Case vbCancel
                                Exit Sub
                            Case vbNo
                            Case vbYes
                                iExchange = True
                        End Select
                    End If
                    If iExchange Then
                        Set iObj = mTabData(mTab).Controls
                        Set mTabData(mTab).Controls = mTabData(t).Controls
                        Set mTabData(t).Controls = iObj
                    Else
                        For Each iCtlName In mTabData(mTab).Controls
                            mTabData(t).Controls.Add iCtlName
                        Next
                        Set mTabData(mTab).Controls = New Collection
                    End If
                    Changed = True
                End If
            Else
                MsgBox "Invalid tab number.", vbCritical
            End If
        Else
            MsgBox "Invalid value.", vbCritical
        End If
    End If
End Sub

Private Sub cmdMoveControlToTab_Click()
    Dim iFrm As frmNewTabSelectControl
    Dim t As Long
    Dim c As Long
    Dim iFound As Boolean
    
    Set iFrm = New frmNewTabSelectControl
    For t = 0 To UBound(mTabData)
        If t <> mTab Then
            For c = 1 To mTabData(t).Controls.Count
                iFrm.lstControls.AddItem mTabData(t).Controls(c) & "   [now in Tab " & t & "]"
            Next
        End If
    Next t
    
    iFrm.Show 1
    If iFrm.SelectedControl <> "" Then
        For t = 0 To UBound(mTabData)
            If t <> mTab Then
                For c = 1 To mTabData(t).Controls.Count
                    If mTabData(t).Controls(c) = iFrm.SelectedControl Then
                        mTabData(t).Controls.Remove c
                        iFound = True
                        Exit For
                    End If
                Next
            End If
            If iFound Then Exit For
        Next t
        
        mTabData(mTab).Controls.Add iFrm.SelectedControl
        Changed = True
    End If
    
End Sub

Private Sub cmdMoveNext_Click()
    Dim iTD As T_TabDataP
    
    iTD = mTabData(mTab)
    mTabData(mTab) = mTabData(mTab + 1)
    mTabData(mTab + 1) = iTD
    DoShowTabData
    mTab = mTab + 1
    Changed = True
    ShowTabData
End Sub

Private Sub cmdMoveNext_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
    tmrClick.Enabled = True
End Sub

Private Sub cmdMoveNext_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
End Sub

Private Sub cmdMovePrevious_Click()
    Dim iTD As T_TabDataP
    
    iTD = mTabData(mTab)
    mTabData(mTab) = mTabData(mTab - 1)
    mTabData(mTab - 1) = iTD
    DoShowTabData
    mTab = mTab - 1
    Changed = True
    ShowTabData
End Sub

Private Sub cmdMovePrevious_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
    tmrClick.Enabled = True
End Sub

Private Sub cmdMovePrevious_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
End Sub

Private Sub cmdRemoveCustomColor_Click()
    mTabData(mTab).CustomColor(cboColorID.ItemData(cboColorID.ListIndex)) = GetGeneralColor(cboColorID.ItemData(cboColorID.ListIndex))
    Changed = True
    ShowCustomColor
End Sub

Private Sub cmdRemoveTab_Click()
    Dim iTabData() As T_TabDataP
    Dim t As Long
    
    If mTabData(mTab).Controls.Count > 0 Then
        MsgBox "Tab " & CStr(mTab) & " has controls, can't remove tabs with controls. Remove the contained controls first.", vbCritical
        Exit Sub
    End If
    If mTabs = 1 Then
        MsgBox "Can't remove last tab.", vbCritical
        Exit Sub
    End If
    
    ReDim iTabData(mTabs - 2)
    For t = 0 To mTab - 1
        iTabData(t) = mTabData(t)
    Next t
    For t = mTab + 1 To mTabs - 1
        iTabData(t - 1) = mTabData(t)
        If iTabData(t - 1).Caption = "Tab " & CStr(t) Then
            iTabData(t - 1).Caption = "Tab " & CStr(t - 1)
        End If
    Next t
    mTabs = mTabs - 1
    
    ReDim mTabData(mTabs - 1)
    For t = 0 To mTabs - 1
        mTabData(t) = iTabData(t)
    Next t
    
    If mTab = mTabs Then
        mTab = mTab - 1
    End If
    
    Changed = True
    
    ShowTabData
End Sub

Private Sub cmdTabNext_Click()
    mLoading = True
    mTab = mTab + 1
    ShowTabData
    mLoading = False
End Sub

Private Sub cmdTabNext_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
    tmrClick.Enabled = True
End Sub

Private Sub cmdTabNext_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
End Sub

Private Sub cmdTabPrev_Click()
    mLoading = True
    mTab = mTab - 1
    ShowTabData
    mLoading = False
End Sub

Private Sub cmdTabPrev_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
    tmrClick.Enabled = True
End Sub

Private Sub cmdTabPrev_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    tmrClick.Enabled = False
End Sub

Private Sub mUniTextTabCaption_GotFocus()
    If Not mUniTextTabCaptionSync Then ' user clicked on textbox
        picTabCaptionHolder.SetFocus
    End If
End Sub

Private Sub mUniTextTabCaption_LostFocus()
    mUniTextTabCaptionSync = False
End Sub


Private Sub mUniTextTabToolTipText_GotFocus()
    If Not mUniTextTabToolTipTextSync Then ' user clicked on textbox
        picTabToolTipTextHolder.SetFocus
    End If
End Sub

Private Sub mUniTextTabToolTipText_LostFocus()
    mUniTextTabToolTipTextSync = False
End Sub


Private Sub mUniTextTabTag_GotFocus()
    If Not mUniTextTabTagSync Then ' user clicked on textbox
        picTabTagHolder.SetFocus
    End If
End Sub

Private Sub mUniTextTabTag_LostFocus()
    mUniTextTabTagSync = False
End Sub


Private Sub mUniTextTabKey_GotFocus()
    If Not mUniTextTabKeySync Then ' user clicked on textbox
        picTabKeyHolder.SetFocus
    End If
End Sub

Private Sub mUniTextTabKey_LostFocus()
    Dim c As Long
    Dim iLCKey As String
    Dim iErrDesc As String
    
    If (mUniTextTabKey.Text <> "") And (Not mLoading) And (Not mShowingTabData) Then
        For c = 0 To mTabs - 1
            If c <> mTab Then
                iLCKey = LCase$(mUniTextTabKey.Text)
                If mTabData(c).Key <> "" Then
                    If LCase$(mTabData(c).Key) = iLCKey Then
                        On Error Resume Next
                        Dim Col As New Collection
                        Col.Add 1, "A"
                        Col.Add 1, "A"
                        iErrDesc = Err.Description
                        On Error GoTo 0
                        MsgBox iErrDesc, vbCritical
                        mUniTextTabKey.Text = ""
                        mUniTextTabKey.SetFocus
                        Exit Sub
                    End If
                End If
            End If
        Next
    End If
    mUniTextTabKeySync = False
End Sub


Private Sub picCustomColor_DblClick()
    cmdChangeCustomColor_Click
End Sub

Private Sub picTabCaptionHolder_GotFocus()
    If Not mUniTextTabCaptionSync Then
        mUniTextTabCaptionSync = True
        mUniTextTabCaption.SetFocus
    End If
End Sub

Private Sub picTabToolTipTextHolder_GotFocus()
    If Not mUniTextTabToolTipTextSync Then
        mUniTextTabToolTipTextSync = True
        mUniTextTabToolTipText.SetFocus
    End If
End Sub

Private Sub picTabTagHolder_GotFocus()
    If Not mUniTextTabTagSync Then
        mUniTextTabTagSync = True
        mUniTextTabTag.SetFocus
    End If
End Sub

Private Sub picTabKeyHolder_GotFocus()
    If Not mUniTextTabKeySync Then
        mUniTextTabKeySync = True
        mUniTextTabKey.SetFocus
    End If
End Sub

Private Sub PropertyPage_ApplyChanges()
    Dim t As Integer
    Dim iSC As NewTab
    Dim iDefaultIconFont As StdFont
    Dim iTabsPrev As Long
    Dim c As Long
    
    Set iDefaultIconFont = New StdFont
    iDefaultIconFont.Name = cPropDef_IconFontName
    iDefaultIconFont.Size = cPropDef_IconFontSize
    
    Set iSC = SelectedControls(0)
    iSC.HideAllContainedControls
    iTabsPrev = iSC.Tabs
    If Not mTDIMode Then
        If mTabs > iSC.Tabs Then
            iSC.Tabs = mTabs
        End If
    End If
    For t = 0 To mTabs - 1
        iSC.TabCaption(t) = mTabData(t).Caption
        iSC.TabToolTipText(t) = mTabData(t).ToolTipText
        iSC.TabTag(t) = mTabData(t).Tag
        iSC.TabData(t) = mTabData(t).Data
        iSC.TabKey(t) = mTabData(t).Key
        iSC.TabFixedWidth(t) = mTabData(t).FixedWidth
        iSC.TabEnabled(t) = mTabData(t).Enabled
        iSC.TabVisible(t) = mTabData(t).Visible
        Set iSC.TabPicture(t) = mTabData(t).Picture
        Set iSC.TabPic16(t) = mTabData(t).Pic16
        Set iSC.TabPic20(t) = mTabData(t).Pic20
        Set iSC.TabPic24(t) = mTabData(t).Pic24
        If Not mTDIMode Then Set iSC.TabControlsNames(t) = mTabData(t).Controls
        If mTabData(t).IconFont Is Nothing Then
            Set iSC.TabIconFont(t) = Nothing
        ElseIf FontsAreEqual(mTabData(t).IconFont, iDefaultIconFont) Then
            Set iSC.TabIconFont(t) = Nothing
        Else
            Set iSC.TabIconFont(t) = CloneFont(mTabData(t).IconFont)
        End If
        iSC.TabIconCharHex(t) = "&H" & Hex$(mTabData(t).IconChar) & "&"
        iSC.TabIconLeftOffset(t) = mTabData(t).IconLeftOffset
        iSC.TabIconTopOffset(t) = mTabData(t).IconTopOffset
        For c = 0 To 16
            iSC.TabCustomColor(t, c) = mTabData(t).CustomColor(c)
        Next
    Next t
    If Not mTDIMode Then
        For t = mTabs To iTabsPrev - 1
            Set iSC.TabControlsNames(t) = New Collection
        Next
        iSC.Tabs = mTabs
        If Not iSC.Subclassed Then iSC.TabSel = Val(txtTab.Text)
    End If
    iSC.MakeContainedControlsInSelTabVisible
    gPagTabsApplyTime = Timer
    gPagTabsLastSelectedTab = mTab
    Set mSC = Nothing
End Sub

Private Sub PropertyPage_Initialize()
    Const ES_AUTOHSCROLL As Long = &H80&
    Const ES_LEFT As Long = &H0&
    Const WS_VISIBLE As Long = &H10000000
    Const WS_EX_CLIENTEDGE  As Long = &H200
    
    picTabCaptionHolder.ScaleMode = vbPixels
    Set mUniTextTabCaption = New cUniTextBox
    mUniTextTabCaption.CreateTextBox picTabCaptionHolder.hWnd, 0, 0, picTabCaptionHolder.ScaleWidth, picTabCaptionHolder.ScaleHeight, ES_AUTOHSCROLL Or ES_LEFT Or WS_VISIBLE, WS_EX_CLIENTEDGE, ""
    picTabToolTipTextHolder.ScaleMode = vbPixels
    Set mUniTextTabToolTipText = New cUniTextBox
    mUniTextTabToolTipText.CreateTextBox picTabToolTipTextHolder.hWnd, 0, 0, picTabToolTipTextHolder.ScaleWidth, picTabToolTipTextHolder.ScaleHeight, ES_AUTOHSCROLL Or ES_LEFT Or WS_VISIBLE, WS_EX_CLIENTEDGE, ""
    picTabTagHolder.ScaleMode = vbPixels
    Set mUniTextTabTag = New cUniTextBox
    mUniTextTabTag.CreateTextBox picTabTagHolder.hWnd, 0, 0, picTabTagHolder.ScaleWidth, picTabTagHolder.ScaleHeight, ES_AUTOHSCROLL Or ES_LEFT Or WS_VISIBLE, WS_EX_CLIENTEDGE, ""
    picTabKeyHolder.ScaleMode = vbPixels
    Set mUniTextTabKey = New cUniTextBox
    mUniTextTabKey.CreateTextBox picTabKeyHolder.hWnd, 0, 0, picTabKeyHolder.ScaleWidth, picTabKeyHolder.ScaleHeight, ES_AUTOHSCROLL Or ES_LEFT Or WS_VISIBLE, WS_EX_CLIENTEDGE, ""
    
End Sub

Private Sub PropertyPage_Paint()
    If tmrShowTabData.Enabled Then tmrShowTabData_Timer
End Sub

Private Sub PropertyPage_SelectionChanged()
    Dim t As Integer
    Dim iVar As Variant
    Dim c As Long
    Dim iAuxNT As NewTab
    
    SetTextBoxNumeric txtTabFixedWidth
    'Debug.Print PropertyPage.Name & " Start: " & Round(Timer, 2)
    mLoading = True
    Set mSC = SelectedControls(0)
    
    mTDIMode = (mSC.TDIMode <> ntTDIModeNone)
    
    If mTDIMode Then
        picTDICover1(1).Left = 2520
        picTDICover1(2).Left = 5400
    End If
    
    For c = picTDICover1.LBound To picTDICover1.UBound
        picTDICover1(c).Visible = mTDIMode
    Next
    'chkTabEnabled.Enabled = False
    chkTabVisible.Enabled = Not mTDIMode
    cmdMovePrevious.Enabled = Not mTDIMode
    cmdMoveNext.Enabled = Not mTDIMode
    cmdMoveContainedControls.Enabled = Not mTDIMode
    cmdMoveControlToTab.Enabled = Not mTDIMode
    cmdInsertTab.Enabled = Not mTDIMode
    cmdRemoveTab.Enabled = Not mTDIMode
    
    If TypeName(SelectedControls(0)) <> "NewTab" Then Exit Sub
    
    Set mDefaultIconFont = New StdFont
    mDefaultIconFont.Name = cPropDef_IconFontName
    mDefaultIconFont.Size = cPropDef_IconFontSize
    
    mTabs = mSC.Tabs
    mSC.StoreVisibleControlsInSelectedTab
    ReDim mTabData(mTabs - 1)
    NewTab1.RightToLeft = mSC.RightToLeft
    NewTab1.Tabs = mSC.Tabs
    For t = 0 To mTabs - 1
        mTabData(t).Caption = mSC.TabCaption(t)
        mTabData(t).ToolTipText = mSC.TabToolTipText(t)
        mTabData(t).Tag = mSC.TabTag(t)
        mTabData(t).Data = mSC.TabData(t)
        mTabData(t).Key = mSC.TabKey(t)
        mTabData(t).FixedWidth = mSC.TabFixedWidth(t)
        mTabData(t).Enabled = mSC.TabEnabled(t)
        mTabData(t).Visible = mSC.TabVisible(t)
        Set mTabData(t).IconFont = CloneFont(mSC.TabIconFont(t))
        mTabData(t).IconChar = Val(mSC.TabIconCharHex(t) & "&")
        mTabData(t).IconLeftOffset = mSC.TabIconLeftOffset(t)
        mTabData(t).IconTopOffset = mSC.TabIconTopOffset(t)
        Set mTabData(t).Picture = mSC.TabPicture(t)
        Set mTabData(t).Pic16 = mSC.TabPic16(t)
        Set mTabData(t).Pic20 = mSC.TabPic20(t)
        Set mTabData(t).Pic24 = mSC.TabPic24(t)
        Set mTabData(t).Controls = New Collection
        For Each iVar In mSC.TabControlsNames(t)
            mTabData(t).Controls.Add iVar
        Next
        For c = 0 To 16
            mTabData(t).CustomColor(c) = mSC.TabCustomColor(t, c)
            NewTab1.TabCustomColor(t, c) = mTabData(t).CustomColor(c)
        Next
        NewTab1.TabCaption(t) = mSC.TabCaption(t)
        NewTab1.TabEnabled(t) = mSC.TabEnabled(t)
        Set NewTab1.TabPic16(t) = mSC.TabPic16(t)
        Set NewTab1.TabPic20(t) = mSC.TabPic20(t)
        Set NewTab1.TabPic24(t) = mSC.TabPic24(t)
        Set NewTab1.TabPicture(t) = mSC.TabPicture(t)
        Set NewTab1.TabIconFont(t) = CloneFont(mSC.TabIconFont(t))
        NewTab1.TabIconCharHex(t) = mSC.TabIconCharHex(t)
        NewTab1.TabIconLeftOffset(t) = mSC.TabIconLeftOffset(t)
        NewTab1.TabIconTopOffset(t) = mSC.TabIconTopOffset(t)
    Next t
    If mTabs > 0 Then
        Set mLastIconFont = CloneFont(mSC.TabIconFont(mTabs - 1))
    Else
        Set mLastIconFont = CloneFont(mDefaultIconFont)
    End If
    
    Set iAuxNT = NewTab1
    iAuxNT.IsTDIFormsSampleInPropertyPage = (mSC.TDIMode = ntTDIModeForms)
    
    NewTab1.Width = mSC.Width
    NewTab1.Height = mSC.Height
    NewTab1.Left = (PropertyPage.ScaleWidth - NewTab1.Width) / 2
    If NewTab1.Width > PropertyPage.ScaleWidth Then
        mEnableHorizontalDragging = True
        NewTab1.ToolTipText = "Drag to move the tab control and see other tabs"
    End If
    If (mSC.Height - mSC.ClientHeight) > 800 Then
        mEnableVerticalDragging = True
        NewTab1.ToolTipText = "Drag to move the tab control and see other tabs"
        NewTab1.Top = 8400 - (mSC.Height - mSC.ClientHeight)
    End If
    
    If ((Timer - gPagTabsApplyTime) < 3) And (gPagTabsApplyTime <> 0) Then
        mTab = gPagTabsLastSelectedTab
    Else
        mTab = mSC.TabSel
    End If
    
    CopyControlProperties mSC, NewTab1
    If mTDIMode Then NewTab1.TabWidthStyle = ntTWTabCaptionWidthFillRows
    
    cboColorID.Clear
    cboColorID.AddItem ntCCBackColorTab & " - ntCCBackColorTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCBackColorTab
    cboColorID.AddItem ntCCBackColorSelectedTab & " - ntCCBackColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCBackColorSelectedTab
    cboColorID.AddItem ntCCHighlightColor & " - ntCCHighlightColor": cboColorID.ItemData(cboColorID.NewIndex) = ntCCHighlightColor
    cboColorID.AddItem ntCCHighlightColorSelectedTab & " - ntCCHighlightColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCHighlightColorSelectedTab
    cboColorID.AddItem ntCCFlatBarColorInactive & " - ntCCFlatBarColorInactive": cboColorID.ItemData(cboColorID.NewIndex) = ntCCFlatBarColorInactive
    cboColorID.AddItem ntCCFlatBarColorHighlight & " - ntCCFlatBarColorHighlight": cboColorID.ItemData(cboColorID.NewIndex) = ntCCFlatBarColorHighlight
    cboColorID.AddItem ntCCFlatBarColorSelectedTab & " - ntCCFlatBarColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCFlatBarColorSelectedTab
    cboColorID.AddItem ntCCFlatTabBorderColorHighlight & " - ntCCFlatTabBorderColorHighlight": cboColorID.ItemData(cboColorID.NewIndex) = ntCCFlatTabBorderColorHighlight
    cboColorID.AddItem ntCCFlatTabBorderColorSelectedTab & " - ntCCFlatTabBorderColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCFlatTabBorderColorSelectedTab
    cboColorID.AddItem ntCCForeColor & " - ntCCForeColor": cboColorID.ItemData(cboColorID.NewIndex) = ntCCForeColor
    cboColorID.AddItem ntCCForeColorHighlighted & " - ntCCForeColorHighlighted": cboColorID.ItemData(cboColorID.NewIndex) = ntCCForeColorHighlighted
    cboColorID.AddItem ntCCForeColorSelectedTab & " - ntCCForeColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCForeColorSelectedTab
    cboColorID.AddItem ntCCIconColor & " - ntCCIconColor": cboColorID.ItemData(cboColorID.NewIndex) = ntCCIconColor
    cboColorID.AddItem ntCCIconColorSelectedTab & " - ntCCIconColorSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCIconColorSelectedTab
    cboColorID.AddItem ntCCIconColorMouseHover & " - ntCCIconColorMouseHover": cboColorID.ItemData(cboColorID.NewIndex) = ntCCIconColorMouseHover
    cboColorID.AddItem ntCCIconColorMouseHoverSelectedTab & " - ntCCIconColorMouseHoverSelectedTab": cboColorID.ItemData(cboColorID.NewIndex) = ntCCIconColorMouseHoverSelectedTab
    cboColorID.AddItem ntCCIconColorTabHighlighted & " - ntCCIconColorTabHighlighted": cboColorID.ItemData(cboColorID.NewIndex) = ntCCIconColorTabHighlighted
    cboColorID.ListIndex = 0
    
    ShowTabData
    
    'Debug.Print PropertyPage.Name & " End: " & Round(Timer, 2)
    mLoading = False
End Sub
Private Sub ShowTabData()
    tmrShowTabData.Enabled = False
    tmrShowTabData.Enabled = True
End Sub

Private Sub DoShowTabData()
    Dim t As Long
    
    If mShowingTabData Then Exit Sub
    mShowingTabData = True
    t = mTab
    txtTab.Text = t
    txtTab.Refresh
    If mUniTextTabCaption.Text <> mTabData(t).Caption Then
        mUniTextTabCaption.Text = mTabData(t).Caption
    End If
    If mUniTextTabToolTipText.Text <> mTabData(t).ToolTipText Then
        mUniTextTabToolTipText.Text = mTabData(t).ToolTipText
    End If
    If mUniTextTabTag.Text <> mTabData(t).Tag Then
        mUniTextTabTag.Text = mTabData(t).Tag
    End If
    If mUniTextTabKey.Text <> mTabData(t).Key Then
        mUniTextTabKey.Text = mTabData(t).Key
    End If
    txtTabData.Text = mTabData(t).Data
    txtTabFixedWidth.Text = mTabData(t).FixedWidth
    chkTabEnabled.Value = CLng(mTabData(t).Enabled) * -1
    chkTabVisible.Value = CLng(mTabData(t).Visible) * -1
    
    cmdTabPrev.Enabled = t > 0
    cmdTabNext.Enabled = t < (mTabs - 1)
    cmdMovePrevious.Enabled = t > 0
    cmdMoveNext.Enabled = t < (mTabs - 1)
    
    lblContainedControls.Caption = "Controls in tab: " & mTabData(t).Controls.Count
    cmdMoveContainedControls.Enabled = (mTabData(t).Controls.Count > 0)
    
    NewTab1.TabCaption(t) = mTabData(t).Caption
    NewTab1.TabEnabled(t) = mTabData(t).Enabled
    Set NewTab1.TabPic16(t) = mTabData(t).Pic16
    Set NewTab1.TabPic20(t) = mTabData(t).Pic20
    Set NewTab1.TabPic24(t) = mTabData(t).Pic24
    Set NewTab1.TabPicture(t) = mTabData(t).Picture
    Set NewTab1.TabIconFont(t) = mTabData(t).IconFont
    NewTab1.TabIconCharHex(t) = "&H" & Hex$(mTabData(t).IconChar) & "&"
    NewTab1.TabIconLeftOffset(t) = mTabData(t).IconLeftOffset
    NewTab1.TabIconTopOffset(t) = mTabData(t).IconTopOffset
    
    ShowCustomColor
    
    mShowingTabData = False
End Sub

Private Sub PropertyPage_Terminate()
    Set mUniTextTabCaption = Nothing
    Set mUniTextTabToolTipText = Nothing
    Set mUniTextTabTag = Nothing
    Set mUniTextTabKey = Nothing
End Sub

Private Sub tmrAutoClick_Timer()
    Dim iHwnd As Long
    
    If Not MouseIsPressingAButton Then
        tmrAutoClick.Enabled = False
    Else
        iHwnd = WindowsUnderMouse
        If (iHwnd = cmdTabPrev.hWnd) Then
            If cmdTabPrev.Enabled Then cmdTabPrev_Click
        ElseIf (iHwnd = cmdTabNext.hWnd) Then
            If cmdTabNext.Enabled Then cmdTabNext_Click
        ElseIf (iHwnd = cmdMovePrevious.hWnd) Then
            If cmdMovePrevious.Enabled Then cmdMovePrevious_Click
        ElseIf (iHwnd = cmdMoveNext.hWnd) Then
            If cmdMoveNext.Enabled Then cmdMoveNext_Click
        End If
    End If
End Sub

Private Sub tmrClick_Timer()
    tmrClick.Enabled = False
    If MouseIsPressingAButton Then
        tmrAutoClick.Enabled = True
    End If
End Sub

Private Sub mUniTextTabCaption_Change()
    If Not mLoading And Not mShowingTabData Then
        Changed = True
        mTabData(mTab).Caption = mUniTextTabCaption.Text
        ShowTabData
    End If
End Sub

Private Sub mUniTextTabToolTipText_Change()
    If Not mLoading And Not mShowingTabData Then
        Changed = True
        mTabData(mTab).ToolTipText = mUniTextTabToolTipText.Text
        ShowTabData
    End If
End Sub

Private Sub mUniTextTabTag_Change()
    If Not mLoading And Not mShowingTabData Then
        Changed = True
        mTabData(mTab).Tag = mUniTextTabTag.Text
    End If
End Sub

Private Sub mUniTextTabKey_Change()
    If Not mLoading And Not mShowingTabData Then
        If mUniTextTabKey.Text <> "" Then
            If IsNumeric(Left$(mUniTextTabKey.Text, 1)) Then
                MsgBox "The TabKey must not start with a number.", vbExclamation
                picTabKeyHolder.SetFocus
                Exit Sub
            End If
        End If
        Changed = True
        mTabData(mTab).Key = mUniTextTabKey.Text
    End If
End Sub

Private Function WindowsUnderMouse() As Long
    Dim iPt As POINTAPI
    
    GetCursorPos iPt
    WindowsUnderMouse = WindowFromPoint(iPt.X, iPt.Y)
End Function

Private Function IsMouseButtonPressed(nButton As NTMouseButtonsConstants) As Boolean
    Dim iButton As Long
    
    iButton = nButton
    If GetSystemMetrics(SM_SWAPBUTTON) <> 0 Then
        If nButton = ntMBLeft Then
            iButton = VK_RBUTTON
        ElseIf nButton = ntMBRight Then
            iButton = VK_LBUTTON
        End If
    End If
    IsMouseButtonPressed = GetAsyncKeyState(iButton) <> 0
End Function

Private Function MouseIsPressingAButton() As Boolean
    Dim iHwnd As Long
    
    If IsMouseButtonPressed(ntMBLeft) Then
        iHwnd = WindowsUnderMouse
        If (iHwnd = cmdTabPrev.hWnd) Or (iHwnd = cmdTabNext.hWnd) Or (iHwnd = cmdMovePrevious.hWnd) Or (iHwnd = cmdMoveNext.hWnd) Then
            MouseIsPressingAButton = True
        End If
    End If
End Function

Private Sub tmrShowTabData_Timer()
    tmrShowTabData.Enabled = False
    DoShowTabData
End Sub

Private Function CloneFont(nOrigFont As iFont) As StdFont
    If nOrigFont Is Nothing Then Exit Function
    nOrigFont.Clone CloneFont
End Function

Private Function FontsAreEqual(nFont1 As StdFont, nFont2 As StdFont) As Boolean
    If nFont1 Is Nothing Or nFont2 Is Nothing Then Exit Function
    
    If (nFont1 Is Nothing) And (nFont2 Is Nothing) Then
        FontsAreEqual = True
        Exit Function
    End If
    If (nFont1 Is Nothing) Then Exit Function
    If (nFont2 Is Nothing) Then Exit Function
    
    If nFont1.Name = nFont2.Name Then
        If nFont1.Size = nFont2.Size Then
            If nFont1.Bold = nFont2.Bold Then
                If nFont1.Italic = nFont2.Italic Then
                    If nFont1.Strikethrough = nFont2.Strikethrough Then
                        If nFont1.Underline = nFont2.Underline Then
                            If nFont1.Weight = nFont2.Weight Then
                                If nFont1.Charset = nFont2.Charset Then
                                    FontsAreEqual = True
                                    Exit Function
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If
End Function

Private Sub txtCustomColor_Change()
    Dim iColor As Long
    
    iColor = -1
    On Error Resume Next
    iColor = CLng(txtCustomColor.Text)
    On Error GoTo 0
    If IsValidOLE_COLOR(iColor) Then
        If iColor <> mTabData(mTab).CustomColor(cboColorID.ItemData(cboColorID.ListIndex)) Then
            mTabData(mTab).CustomColor(cboColorID.ItemData(cboColorID.ListIndex)) = iColor
            ShowCustomColor
            Changed = True
        End If
    ElseIf Trim$(txtCustomColor.Text) = "" Then
        cmdRemoveCustomColor_Click
    End If
End Sub

Private Sub txtTabData_Change()
    Static sPrevValue As String
    Dim iVal As String
    
    If Not mLoading And Not mShowingTabData Then
        If Not IsNumeric(txtTabData.Text) Then
            MsgBox "This data can hold only numeric Long values", vbExclamation
            txtTabData.Text = sPrevValue
            txtTabData.SetFocus
            Exit Sub
        End If
        
        iVal = "a"
        On Error Resume Next
        iVal = CStr(CLng(txtTabData.Text))
        On Error GoTo 0
        If iVal = "a" Then
            MsgBox "This data can hold only numeric Long values", vbExclamation
            txtTabData.Text = sPrevValue
            txtTabData.SetFocus
            Exit Sub
        End If
        
        sPrevValue = txtTabData.Text
    
        Changed = True
        mTabData(mTab).Data = Val(txtTabData.Text)
    End If
End Sub

Private Sub txtTabFixedWidth_Change()
    Static sPrevValue As String
    Dim iVal As String
    
    If Not mLoading And Not mShowingTabData Then
        iVal = "a"
        On Error Resume Next
        iVal = CStr(CLng(txtTabFixedWidth.Text))
        On Error GoTo 0
        If (iVal = "a") Or (Val(iVal) < 0) Then
            txtTabFixedWidth.Text = sPrevValue
            txtTabFixedWidth.SetFocus
            Exit Sub
        End If
        
        sPrevValue = txtTabFixedWidth.Text
    
        Changed = True
        mTabData(mTab).Data = Val(txtTabFixedWidth.Text)
    End If
End Sub

Private Sub SetTextBoxNumeric(nTxt As Object)
    Const ES_NUMBER As Long = &H2000&
    Const GWL_STYLE = (-16)
    
    SetWindowLong nTxt.hWnd, GWL_STYLE, GetWindowLong(nTxt.hWnd, GWL_STYLE) Or ES_NUMBER
End Sub

Private Sub ShowCustomColor()
    Dim iColorID As NTTabCustomColorIDConstants
    Dim iGeneralColor As Long
    Dim X As Long
    Dim Y As Long
    
    iColorID = cboColorID.ItemData(cboColorID.ListIndex)
    iGeneralColor = GetGeneralColor(iColorID)
    picCustomColor.Cls
    If (mTabData(mTab).CustomColor(iColorID) = iGeneralColor) Then
        ' custom color not set
        picCustomColor.BackColor = vbButtonFace
        For Y = 0 To 5
            For X = 0 To 5
                If IIf(Y Mod 2 = 0, X Mod 2 = 0, X Mod 2 <> 0) Then
                    picCustomColor.Line (picCustomColor.ScaleWidth / 6 * X, picCustomColor.ScaleHeight / 6 * Y)-(picCustomColor.ScaleWidth / 6 * X + picCustomColor.ScaleWidth / 6, picCustomColor.ScaleHeight / 6 * Y + picCustomColor.ScaleHeight / 6), vb3DLight, BF
                End If
            Next
        Next
        picCustomColor.CurrentY = picCustomColor.ScaleHeight / 7
        picCustomColor.CurrentX = (picCustomColor.ScaleWidth - picCustomColor.TextWidth("Not")) / 2
        picCustomColor.Print "Not"
        picCustomColor.CurrentX = (picCustomColor.ScaleWidth - picCustomColor.TextWidth("set")) / 2
        picCustomColor.Print "set"
        cmdRemoveCustomColor.Enabled = False
        txtCustomColor.Text = ""
    Else
        picCustomColor.BackColor = mTabData(mTab).CustomColor(iColorID)
        cmdRemoveCustomColor.Enabled = True
        txtCustomColor.Text = "&H" & Hex(mTabData(mTab).CustomColor(iColorID))
        txtCustomColor.SelStart = Len(txtCustomColor.Text)
    End If
    picGeneralColor.BackColor = iGeneralColor
    picGeneralColor.ToolTipText = "&H" & Hex(iGeneralColor)
    NewTab1.TabCustomColor(mTab, iColorID) = mTabData(mTab).CustomColor(iColorID)
End Sub

Private Function GetGeneralColor(nColorID As NTTabCustomColorIDConstants) As Long
    Select Case nColorID
        Case ntCCBackColorTab
            GetGeneralColor = mSC.BackColorTabs
        Case ntCCBackColorSelectedTab
            GetGeneralColor = mSC.BackColorSelectedTab
        Case ntCCHighlightColor
            GetGeneralColor = mSC.HighlightColor
        Case ntCCHighlightColorSelectedTab
            GetGeneralColor = mSC.HighlightColorSelectedTab
        Case ntCCFlatBarColorInactive
            GetGeneralColor = mSC.FlatBarColorInactive
        Case ntCCFlatBarColorHighlight
            GetGeneralColor = mSC.FlatBarColorHighlight
        Case ntCCFlatBarColorSelectedTab
            GetGeneralColor = mSC.FlatBarColorSelectedTab
        Case ntCCFlatTabBorderColorHighlight
            GetGeneralColor = mSC.FlatTabBorderColorHighlight
        Case ntCCFlatTabBorderColorSelectedTab
            GetGeneralColor = mSC.FlatTabBorderColorSelectedTab
        Case ntCCForeColor
            GetGeneralColor = mSC.ForeColor
        Case ntCCForeColorHighlighted
            GetGeneralColor = mSC.ForeColorHighlighted
        Case ntCCForeColorSelectedTab
            GetGeneralColor = mSC.ForeColorSelectedTab
        Case ntCCIconColor
            GetGeneralColor = mSC.IconColor
        Case ntCCIconColorSelectedTab
            GetGeneralColor = mSC.IconColorSelectedTab
        Case ntCCIconColorMouseHover
            GetGeneralColor = mSC.IconColorMouseHover
        Case ntCCIconColorMouseHoverSelectedTab
            GetGeneralColor = mSC.IconColorMouseHoverSelectedTab
        Case ntCCIconColorTabHighlighted
            GetGeneralColor = mSC.IconColorTabHighlighted
    End Select
End Function

Private Sub tmrTabChanged_Timer()
    tmrTabChanged.Enabled = False
End Sub

Private Sub NewTab1_Click(PreviousTab As Integer)
    If Not mLoading And Not mShowingTabData Then
        mLoading = True
        mTab = NewTab1.TabSel
        ShowTabData
        mLoading = False
    End If
        
    If (NewTab1.Left + NewTab1.GetTabLeft(mTab) + NewTab1.GetTabWidth(mTab)) > PropertyPage.ScaleWidth Then
        tmrTabChanged.Enabled = True
        NewTab1.Left = PropertyPage.ScaleWidth - (NewTab1.GetTabLeft(mTab) + NewTab1.GetTabWidth(mTab)) - 120
    ElseIf (NewTab1.Left + NewTab1.GetTabLeft(mTab)) < 0 Then
        tmrTabChanged.Enabled = True
        NewTab1.Left = 120 - NewTab1.GetTabLeft(mTab)
    End If
End Sub

Private Sub NewTab1_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If mEnableHorizontalDragging Then
        If Button = vbLeftButton Then
            mXMouseDown = X
        End If
    End If
    If mEnableVerticalDragging Then
        If Button = vbLeftButton Then
            mYMouseDown = Y
        End If
    End If
End Sub

Private Sub NewTab1_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Not tmrTabChanged.Enabled Then
        If mEnableHorizontalDragging Then
            If Button = vbLeftButton Then
                NewTab1.Left = NewTab1.Left + X - mXMouseDown
                DoEvents
            End If
        End If
        If mEnableVerticalDragging Then
            If Button = vbLeftButton Then
                NewTab1.Top = NewTab1.Top + Y - mYMouseDown
                DoEvents
            End If
        End If
    End If
End Sub

Private Sub txtTab_Change()
    NewTab1.TabSel = Val(txtTab.Text)
    If Not mSC.Subclassed Then Changed = True
End Sub
